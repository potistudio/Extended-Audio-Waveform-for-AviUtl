
--track0: 始点, -2000, 2000, -400
--track1: 終点, -2000, 2000, 400
--track2: 粒子密度, 0, 4000, 1920
--track3: 波形高さ, 0, 1000, 100

--dialog: 拡張数, local amount=16;

-------- Import rikky_module --------
package.cpath = package.cpath .. ";" .. obj.getinfo ("script_path"):match ("(.*\\).*\\") .. "?.dll"
local bool, rikky_module = pcall (require, "rikky_module")

if not bool then
	obj.load ("<s100>require rikky_module!")
	obj.draw()

	return
end

-------- Pre --------
obj.setfont ("MS UI Gothic", 50, 0, 0xffffff)
obj.setoption ("drawtarget", "tempbuffer", obj.screen_w, obj.screen_h)

-------- Main --------
local startPoint = obj.track0
local endPoint = obj.track1
local particleDensity = obj.track2
local heightMultiplier = obj.track3 * 0.00005

local currentFrame, totalFrame = rikky_module.getinfo ("frame")
local mergedWaveformBuffer = {}

local function remap (x, in_min, in_max, out_min, out_max)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
end

local function lerp (a, b, t)
	return a * (1 - t) + b * t
end

local function lerpTable (table, t)
	local i = math.floor (t)

	if i < 1 then
		i = 1
	elseif i >= #table then
		i = #table - 1
	end

	local dt = t - i
	local a = table[i]
	local b = table[i + 1]

	return lerp (a, b, dt)
end

for i = 1, amount do
	local waveform = rikky_module.audiobuffer (currentFrame + (i - 1), "PCM", "absolute", "monaural", 4096, 0)

	for j = 1, #waveform do
		mergedWaveformBuffer[#mergedWaveformBuffer + 1] = waveform[j]
	end
end

-------- Draw --------
obj.load ("figure", "円", 0xffffff, 8)

local lerpedWaveform = {}
for i = 0, particleDensity - 1 do
	local delta = #mergedWaveformBuffer / particleDensity
	lerpedWaveform[i + 1] = lerpTable (mergedWaveformBuffer, delta * i)
end

for i = 1, #lerpedWaveform do
	local x = remap (i / #lerpedWaveform, 0, 1, startPoint, endPoint)
	obj.draw (x, lerpedWaveform[i] * heightMultiplier)
end

-------- Post --------
obj.load ("tempbuffer")
obj.effect()
